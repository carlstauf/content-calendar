generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String?   // Made optional for name-only auth
  name        String    @unique
  avatarUrl   String?
  role        UserRole  @default(editor)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  posts       Post[]    @relation("PostAssignee")
  comments    Comment[]
  mentions    Mention[]
  sessions    Session[]

  @@index([email])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model Post {
  id          String       @id @default(cuid())
  title       String
  description String
  platform    Platform?
  pillar      Pillar?
  publishDate DateTime
  status      Status       @default(Scheduled)
  imageUrl    String?
  assigneeId  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attachments Attachment[]
  comments    Comment[]
  assignee    User?        @relation("PostAssignee", fields: [assigneeId], references: [id])

  @@index([publishDate, status])
  @@index([platform])
  @@index([pillar])
  @@index([assigneeId])
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  postId    String
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  mentions  Mention[]

  @@index([postId])
  @@index([authorId])
}

model Mention {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([commentId, userId])
  @@index([userId])
}

model Attachment {
  id        String   @id @default(cuid())
  postId    String
  fileName  String
  fileUrl   String
  fileSize  Int
  mimeType  String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model JobLog {
  id          String    @id @default(cuid())
  jobType     String
  jobData     Json
  status      String
  error       String?
  createdAt   DateTime  @default(now())
  completedAt DateTime?

  @@index([jobType, status])
  @@index([createdAt])
}

enum Platform {
  TikTok
  X
  LinkedIn
  Instagram
}

enum Pillar {
  Life_at_a_Startup @map("Life at a Startup")
  How_to_Build_and_Run_a_Startup @map("How to Build and Run a Startup")
  Industry_Insights @map("Industry Insights")
  Product_Updates @map("Product Updates")
}

enum Status {
  Draft
  Scheduled
  Published
}

enum UserRole {
  admin
  editor
  viewer
}
